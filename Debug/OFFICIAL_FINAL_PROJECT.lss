
OFFICIAL_FINAL_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001342  000013d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800114  00800114  000013ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef5  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da1  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00003be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000551  00000000  00000000  00004382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000048d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c6       	rjmp	.+3076   	; 0xc3a <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e4       	ldi	r30, 0x42	; 66
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 31       	cpi	r26, 0x14	; 20
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e1       	ldi	r26, 0x14	; 20
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 39       	cpi	r26, 0x92	; 146
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	13 d7       	rcall	.+3622   	; 0xeea <main>
      c4:	0c 94 9f 09 	jmp	0x133e	; 0x133e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <time>:
      ca:	fc 01       	movw	r30, r24
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <__system_time>
      d4:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <__system_time+0x1>
      d8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__system_time+0x2>
      dc:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__system_time+0x3>
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	30 97       	sbiw	r30, 0x00	; 0
      e4:	21 f0       	breq	.+8      	; 0xee <time+0x24>
      e6:	60 83       	st	Z, r22
      e8:	71 83       	std	Z+1, r23	; 0x01
      ea:	82 83       	std	Z+2, r24	; 0x02
      ec:	93 83       	std	Z+3, r25	; 0x03
      ee:	08 95       	ret

000000f0 <moveObject>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	91 05       	cpc	r25, r1
      f4:	51 f0       	breq	.+20     	; 0x10a <moveObject+0x1a>
      f6:	24 f4       	brge	.+8      	; 0x100 <moveObject+0x10>
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	09 f4       	brne	.+2      	; 0xfe <moveObject+0xe>
      fc:	fc c0       	rjmp	.+504    	; 0x2f6 <moveObject+0x206>
      fe:	13 c0       	rjmp	.+38     	; 0x126 <moveObject+0x36>
     100:	86 30       	cpi	r24, 0x06	; 6
     102:	91 05       	cpc	r25, r1
     104:	0c f4       	brge	.+2      	; 0x108 <moveObject+0x18>
     106:	f7 c0       	rjmp	.+494    	; 0x2f6 <moveObject+0x206>
     108:	0e c0       	rjmp	.+28     	; 0x126 <moveObject+0x36>
     10a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <newPosition>
     10e:	21 30       	cpi	r18, 0x01	; 1
     110:	d9 f0       	breq	.+54     	; 0x148 <moveObject+0x58>
     112:	22 30       	cpi	r18, 0x02	; 2
     114:	09 f4       	brne	.+2      	; 0x118 <moveObject+0x28>
     116:	4d c0       	rjmp	.+154    	; 0x1b2 <moveObject+0xc2>
     118:	24 30       	cpi	r18, 0x04	; 4
     11a:	09 f4       	brne	.+2      	; 0x11e <moveObject+0x2e>
     11c:	b4 c0       	rjmp	.+360    	; 0x286 <moveObject+0x196>
     11e:	28 30       	cpi	r18, 0x08	; 8
     120:	09 f0       	breq	.+2      	; 0x124 <moveObject+0x34>
     122:	eb c0       	rjmp	.+470    	; 0x2fa <moveObject+0x20a>
     124:	7a c0       	rjmp	.+244    	; 0x21a <moveObject+0x12a>
     126:	83 30       	cpi	r24, 0x03	; 3
     128:	91 05       	cpc	r25, r1
     12a:	09 f4       	brne	.+2      	; 0x12e <moveObject+0x3e>
     12c:	76 c0       	rjmp	.+236    	; 0x21a <moveObject+0x12a>
     12e:	2c f4       	brge	.+10     	; 0x13a <moveObject+0x4a>
     130:	82 30       	cpi	r24, 0x02	; 2
     132:	91 05       	cpc	r25, r1
     134:	09 f4       	brne	.+2      	; 0x138 <moveObject+0x48>
     136:	a7 c0       	rjmp	.+334    	; 0x286 <moveObject+0x196>
     138:	08 95       	ret
     13a:	84 30       	cpi	r24, 0x04	; 4
     13c:	91 05       	cpc	r25, r1
     13e:	21 f0       	breq	.+8      	; 0x148 <moveObject+0x58>
     140:	85 30       	cpi	r24, 0x05	; 5
     142:	91 05       	cpc	r25, r1
     144:	b1 f1       	breq	.+108    	; 0x1b2 <moveObject+0xc2>
     146:	08 95       	ret
     148:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <height>
     14c:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <height+0x1>
     150:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     154:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     158:	df 01       	movw	r26, r30
     15a:	aa 0f       	add	r26, r26
     15c:	bb 1f       	adc	r27, r27
     15e:	aa 0f       	add	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	aa 0f       	add	r26, r26
     164:	bb 1f       	adc	r27, r27
     166:	a8 0f       	add	r26, r24
     168:	b9 1f       	adc	r27, r25
     16a:	a4 5b       	subi	r26, 0xB4	; 180
     16c:	be 4f       	sbci	r27, 0xFE	; 254
     16e:	1c 92       	st	X, r1
     170:	00 97       	sbiw	r24, 0x00	; 0
     172:	39 f4       	brne	.+14     	; 0x182 <moveObject+0x92>
     174:	87 e0       	ldi	r24, 0x07	; 7
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <width+0x1>
     17c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <width>
     180:	05 c0       	rjmp	.+10     	; 0x18c <moveObject+0x9c>
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <width+0x1>
     188:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <width>
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     19c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     1a0:	e8 0f       	add	r30, r24
     1a2:	f9 1f       	adc	r31, r25
     1a4:	e4 5b       	subi	r30, 0xB4	; 180
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 83       	st	Z, r24
     1ac:	84 e0       	ldi	r24, 0x04	; 4
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
     1b2:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <height>
     1b6:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <height+0x1>
     1ba:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     1be:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     1c2:	df 01       	movw	r26, r30
     1c4:	aa 0f       	add	r26, r26
     1c6:	bb 1f       	adc	r27, r27
     1c8:	aa 0f       	add	r26, r26
     1ca:	bb 1f       	adc	r27, r27
     1cc:	aa 0f       	add	r26, r26
     1ce:	bb 1f       	adc	r27, r27
     1d0:	a8 0f       	add	r26, r24
     1d2:	b9 1f       	adc	r27, r25
     1d4:	a4 5b       	subi	r26, 0xB4	; 180
     1d6:	be 4f       	sbci	r27, 0xFE	; 254
     1d8:	1c 92       	st	X, r1
     1da:	87 30       	cpi	r24, 0x07	; 7
     1dc:	91 05       	cpc	r25, r1
     1de:	29 f4       	brne	.+10     	; 0x1ea <moveObject+0xfa>
     1e0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <width+0x1>
     1e4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <width>
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <moveObject+0x104>
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <width+0x1>
     1f0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <width>
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     204:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     208:	e8 0f       	add	r30, r24
     20a:	f9 1f       	adc	r31, r25
     20c:	e4 5b       	subi	r30, 0xB4	; 180
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 83       	st	Z, r24
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	08 95       	ret
     21a:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <height>
     21e:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <height+0x1>
     222:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     226:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     22a:	f9 01       	movw	r30, r18
     22c:	ee 0f       	add	r30, r30
     22e:	ff 1f       	adc	r31, r31
     230:	ee 0f       	add	r30, r30
     232:	ff 1f       	adc	r31, r31
     234:	ee 0f       	add	r30, r30
     236:	ff 1f       	adc	r31, r31
     238:	e8 0f       	add	r30, r24
     23a:	f9 1f       	adc	r31, r25
     23c:	e4 5b       	subi	r30, 0xB4	; 180
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	10 82       	st	Z, r1
     242:	27 30       	cpi	r18, 0x07	; 7
     244:	31 05       	cpc	r19, r1
     246:	29 f4       	brne	.+10     	; 0x252 <moveObject+0x162>
     248:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <height+0x1>
     24c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <height>
     250:	06 c0       	rjmp	.+12     	; 0x25e <moveObject+0x16e>
     252:	2f 5f       	subi	r18, 0xFF	; 255
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <height+0x1>
     25a:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <height>
     25e:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <height>
     262:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <height+0x1>
     266:	ee 0f       	add	r30, r30
     268:	ff 1f       	adc	r31, r31
     26a:	ee 0f       	add	r30, r30
     26c:	ff 1f       	adc	r31, r31
     26e:	ee 0f       	add	r30, r30
     270:	ff 1f       	adc	r31, r31
     272:	8e 0f       	add	r24, r30
     274:	9f 1f       	adc	r25, r31
     276:	fc 01       	movw	r30, r24
     278:	e4 5b       	subi	r30, 0xB4	; 180
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 83       	st	Z, r24
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	08 95       	ret
     286:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <height>
     28a:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <height+0x1>
     28e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <width>
     292:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <width+0x1>
     296:	f9 01       	movw	r30, r18
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e8 0f       	add	r30, r24
     2a6:	f9 1f       	adc	r31, r25
     2a8:	e4 5b       	subi	r30, 0xB4	; 180
     2aa:	fe 4f       	sbci	r31, 0xFE	; 254
     2ac:	10 82       	st	Z, r1
     2ae:	21 15       	cp	r18, r1
     2b0:	31 05       	cpc	r19, r1
     2b2:	39 f4       	brne	.+14     	; 0x2c2 <moveObject+0x1d2>
     2b4:	27 e0       	ldi	r18, 0x07	; 7
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <height+0x1>
     2bc:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <height>
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <moveObject+0x1de>
     2c2:	21 50       	subi	r18, 0x01	; 1
     2c4:	31 09       	sbc	r19, r1
     2c6:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <height+0x1>
     2ca:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <height>
     2ce:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <height>
     2d2:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <height+0x1>
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	ee 0f       	add	r30, r30
     2dc:	ff 1f       	adc	r31, r31
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	8e 0f       	add	r24, r30
     2e4:	9f 1f       	adc	r25, r31
     2e6:	fc 01       	movw	r30, r24
     2e8:	e4 5b       	subi	r30, 0xB4	; 180
     2ea:	fe 4f       	sbci	r31, 0xFE	; 254
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 83       	st	Z, r24
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	08 95       	ret
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	08 95       	ret

000002fc <make_Walls>:
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	91 05       	cpc	r25, r1
     304:	e1 f0       	breq	.+56     	; 0x33e <make_Walls+0x42>
     306:	24 f4       	brge	.+8      	; 0x310 <make_Walls+0x14>
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	09 f4       	brne	.+2      	; 0x30e <make_Walls+0x12>
     30c:	67 c4       	rjmp	.+2254   	; 0xbdc <__LOCK_REGION_LENGTH__+0x7dc>
     30e:	0f c0       	rjmp	.+30     	; 0x32e <make_Walls+0x32>
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	91 05       	cpc	r25, r1
     314:	09 f4       	brne	.+2      	; 0x318 <make_Walls+0x1c>
     316:	97 c0       	rjmp	.+302    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     318:	83 30       	cpi	r24, 0x03	; 3
     31a:	91 05       	cpc	r25, r1
     31c:	41 f4       	brne	.+16     	; 0x32e <make_Walls+0x32>
     31e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <wall_height>
     322:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <wall_height+0x1>
     326:	07 97       	sbiw	r24, 0x07	; 7
     328:	09 f0       	breq	.+2      	; 0x32c <make_Walls+0x30>
     32a:	8d c0       	rjmp	.+282    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     32c:	08 c0       	rjmp	.+16     	; 0x33e <make_Walls+0x42>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	91 05       	cpc	r25, r1
     332:	29 f0       	breq	.+10     	; 0x33e <make_Walls+0x42>
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	91 05       	cpc	r25, r1
     338:	09 f0       	breq	.+2      	; 0x33c <make_Walls+0x40>
     33a:	58 c4       	rjmp	.+2224   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     33c:	84 c0       	rjmp	.+264    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     33e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <wall_height+0x1>
     342:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <wall_height>
     346:	d0 d7       	rcall	.+4000   	; 0x12e8 <random>
     348:	25 e0       	ldi	r18, 0x05	; 5
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	11 d7       	rcall	.+3618   	; 0x1174 <__divmodsi4>
     352:	ab 01       	movw	r20, r22
     354:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <r+0x1>
     358:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <r>
     35c:	e4 e8       	ldi	r30, 0x84	; 132
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	2c e8       	ldi	r18, 0x8C	; 140
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	80 81       	ld	r24, Z
     366:	82 50       	subi	r24, 0x02	; 2
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	08 f4       	brcc	.+2      	; 0x36e <make_Walls+0x72>
     36c:	10 82       	st	Z, r1
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	e2 17       	cp	r30, r18
     372:	f3 07       	cpc	r31, r19
     374:	b9 f7       	brne	.-18     	; 0x364 <make_Walls+0x68>
     376:	41 15       	cp	r20, r1
     378:	51 05       	cpc	r21, r1
     37a:	71 f4       	brne	.+28     	; 0x398 <make_Walls+0x9c>
     37c:	ec e4       	ldi	r30, 0x4C	; 76
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	10 82       	st	Z, r1
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	81 83       	std	Z+1, r24	; 0x01
     386:	82 83       	std	Z+2, r24	; 0x02
     388:	83 83       	std	Z+3, r24	; 0x03
     38a:	84 83       	std	Z+4, r24	; 0x04
     38c:	85 83       	std	Z+5, r24	; 0x05
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	87 83       	std	Z+7, r24	; 0x07
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2a c4       	rjmp	.+2132   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     398:	41 30       	cpi	r20, 0x01	; 1
     39a:	51 05       	cpc	r21, r1
     39c:	71 f4       	brne	.+28     	; 0x3ba <make_Walls+0xbe>
     39e:	ec e4       	ldi	r30, 0x4C	; 76
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	80 83       	st	Z, r24
     3a6:	11 82       	std	Z+1, r1	; 0x01
     3a8:	82 83       	std	Z+2, r24	; 0x02
     3aa:	83 83       	std	Z+3, r24	; 0x03
     3ac:	84 83       	std	Z+4, r24	; 0x04
     3ae:	85 83       	std	Z+5, r24	; 0x05
     3b0:	86 83       	std	Z+6, r24	; 0x06
     3b2:	87 83       	std	Z+7, r24	; 0x07
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	19 c4       	rjmp	.+2098   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     3ba:	42 30       	cpi	r20, 0x02	; 2
     3bc:	51 05       	cpc	r21, r1
     3be:	71 f4       	brne	.+28     	; 0x3dc <make_Walls+0xe0>
     3c0:	ec e4       	ldi	r30, 0x4C	; 76
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	80 83       	st	Z, r24
     3c8:	81 83       	std	Z+1, r24	; 0x01
     3ca:	12 82       	std	Z+2, r1	; 0x02
     3cc:	83 83       	std	Z+3, r24	; 0x03
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	85 83       	std	Z+5, r24	; 0x05
     3d2:	86 83       	std	Z+6, r24	; 0x06
     3d4:	87 83       	std	Z+7, r24	; 0x07
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 c4       	rjmp	.+2064   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     3dc:	43 30       	cpi	r20, 0x03	; 3
     3de:	51 05       	cpc	r21, r1
     3e0:	71 f4       	brne	.+28     	; 0x3fe <make_Walls+0x102>
     3e2:	ec e4       	ldi	r30, 0x4C	; 76
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	80 83       	st	Z, r24
     3ea:	81 83       	std	Z+1, r24	; 0x01
     3ec:	82 83       	std	Z+2, r24	; 0x02
     3ee:	13 82       	std	Z+3, r1	; 0x03
     3f0:	84 83       	std	Z+4, r24	; 0x04
     3f2:	85 83       	std	Z+5, r24	; 0x05
     3f4:	86 83       	std	Z+6, r24	; 0x06
     3f6:	87 83       	std	Z+7, r24	; 0x07
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	f7 c3       	rjmp	.+2030   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     3fe:	44 30       	cpi	r20, 0x04	; 4
     400:	51 05       	cpc	r21, r1
     402:	79 f4       	brne	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     404:	ec e4       	ldi	r30, 0x4C	; 76
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	80 83       	st	Z, r24
     40c:	81 83       	std	Z+1, r24	; 0x01
     40e:	82 83       	std	Z+2, r24	; 0x02
     410:	83 83       	std	Z+3, r24	; 0x03
     412:	94 e0       	ldi	r25, 0x04	; 4
     414:	94 83       	std	Z+4, r25	; 0x04
     416:	85 83       	std	Z+5, r24	; 0x05
     418:	86 83       	std	Z+6, r24	; 0x06
     41a:	87 83       	std	Z+7, r24	; 0x07
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	e5 c3       	rjmp	.+1994   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     422:	45 30       	cpi	r20, 0x05	; 5
     424:	51 05       	cpc	r21, r1
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	dc c3       	rjmp	.+1976   	; 0xbe2 <__LOCK_REGION_LENGTH__+0x7e2>
     42a:	ec e4       	ldi	r30, 0x4C	; 76
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	80 83       	st	Z, r24
     432:	81 83       	std	Z+1, r24	; 0x01
     434:	82 83       	std	Z+2, r24	; 0x02
     436:	83 83       	std	Z+3, r24	; 0x03
     438:	84 83       	std	Z+4, r24	; 0x04
     43a:	85 83       	std	Z+5, r24	; 0x05
     43c:	86 83       	std	Z+6, r24	; 0x06
     43e:	17 82       	std	Z+7, r1	; 0x07
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	d3 c3       	rjmp	.+1958   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     446:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <r>
     44a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <r+0x1>
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	9c c0       	rjmp	.+312    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     454:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <wall_height>
     458:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <wall_height+0x1>
     45c:	df 01       	movw	r26, r30
     45e:	aa 0f       	add	r26, r26
     460:	bb 1f       	adc	r27, r27
     462:	aa 0f       	add	r26, r26
     464:	bb 1f       	adc	r27, r27
     466:	aa 0f       	add	r26, r26
     468:	bb 1f       	adc	r27, r27
     46a:	a4 5b       	subi	r26, 0xB4	; 180
     46c:	be 4f       	sbci	r27, 0xFE	; 254
     46e:	11 96       	adiw	r26, 0x01	; 1
     470:	1c 92       	st	X, r1
     472:	11 97       	sbiw	r26, 0x01	; 1
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	1c 92       	st	X, r1
     478:	12 97       	sbiw	r26, 0x02	; 2
     47a:	13 96       	adiw	r26, 0x03	; 3
     47c:	1c 92       	st	X, r1
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	14 96       	adiw	r26, 0x04	; 4
     482:	1c 92       	st	X, r1
     484:	14 97       	sbiw	r26, 0x04	; 4
     486:	15 96       	adiw	r26, 0x05	; 5
     488:	1c 92       	st	X, r1
     48a:	15 97       	sbiw	r26, 0x05	; 5
     48c:	16 96       	adiw	r26, 0x06	; 6
     48e:	1c 92       	st	X, r1
     490:	16 97       	sbiw	r26, 0x06	; 6
     492:	17 96       	adiw	r26, 0x07	; 7
     494:	1c 92       	st	X, r1
     496:	31 96       	adiw	r30, 0x01	; 1
     498:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     49c:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     4a0:	df 01       	movw	r26, r30
     4a2:	aa 0f       	add	r26, r26
     4a4:	bb 1f       	adc	r27, r27
     4a6:	aa 0f       	add	r26, r26
     4a8:	bb 1f       	adc	r27, r27
     4aa:	aa 0f       	add	r26, r26
     4ac:	bb 1f       	adc	r27, r27
     4ae:	a4 5b       	subi	r26, 0xB4	; 180
     4b0:	be 4f       	sbci	r27, 0xFE	; 254
     4b2:	11 96       	adiw	r26, 0x01	; 1
     4b4:	8c 91       	ld	r24, X
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	09 f4       	brne	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	4f c0       	rjmp	.+158    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     4bc:	df 01       	movw	r26, r30
     4be:	aa 0f       	add	r26, r26
     4c0:	bb 1f       	adc	r27, r27
     4c2:	aa 0f       	add	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	aa 0f       	add	r26, r26
     4c8:	bb 1f       	adc	r27, r27
     4ca:	a4 5b       	subi	r26, 0xB4	; 180
     4cc:	be 4f       	sbci	r27, 0xFE	; 254
     4ce:	12 96       	adiw	r26, 0x02	; 2
     4d0:	8c 91       	ld	r24, X
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d6:	41 c0       	rjmp	.+130    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     4d8:	df 01       	movw	r26, r30
     4da:	aa 0f       	add	r26, r26
     4dc:	bb 1f       	adc	r27, r27
     4de:	aa 0f       	add	r26, r26
     4e0:	bb 1f       	adc	r27, r27
     4e2:	aa 0f       	add	r26, r26
     4e4:	bb 1f       	adc	r27, r27
     4e6:	a4 5b       	subi	r26, 0xB4	; 180
     4e8:	be 4f       	sbci	r27, 0xFE	; 254
     4ea:	13 96       	adiw	r26, 0x03	; 3
     4ec:	8c 91       	ld	r24, X
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	a1 f1       	breq	.+104    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     4f2:	df 01       	movw	r26, r30
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	aa 0f       	add	r26, r26
     4fa:	bb 1f       	adc	r27, r27
     4fc:	aa 0f       	add	r26, r26
     4fe:	bb 1f       	adc	r27, r27
     500:	a4 5b       	subi	r26, 0xB4	; 180
     502:	be 4f       	sbci	r27, 0xFE	; 254
     504:	14 96       	adiw	r26, 0x04	; 4
     506:	8c 91       	ld	r24, X
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	39 f1       	breq	.+78     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     50c:	df 01       	movw	r26, r30
     50e:	aa 0f       	add	r26, r26
     510:	bb 1f       	adc	r27, r27
     512:	aa 0f       	add	r26, r26
     514:	bb 1f       	adc	r27, r27
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	a4 5b       	subi	r26, 0xB4	; 180
     51c:	be 4f       	sbci	r27, 0xFE	; 254
     51e:	15 96       	adiw	r26, 0x05	; 5
     520:	8c 91       	ld	r24, X
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	d1 f0       	breq	.+52     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     526:	df 01       	movw	r26, r30
     528:	aa 0f       	add	r26, r26
     52a:	bb 1f       	adc	r27, r27
     52c:	aa 0f       	add	r26, r26
     52e:	bb 1f       	adc	r27, r27
     530:	aa 0f       	add	r26, r26
     532:	bb 1f       	adc	r27, r27
     534:	a4 5b       	subi	r26, 0xB4	; 180
     536:	be 4f       	sbci	r27, 0xFE	; 254
     538:	16 96       	adiw	r26, 0x06	; 6
     53a:	8c 91       	ld	r24, X
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	69 f0       	breq	.+26     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     540:	df 01       	movw	r26, r30
     542:	aa 0f       	add	r26, r26
     544:	bb 1f       	adc	r27, r27
     546:	aa 0f       	add	r26, r26
     548:	bb 1f       	adc	r27, r27
     54a:	aa 0f       	add	r26, r26
     54c:	bb 1f       	adc	r27, r27
     54e:	a4 5b       	subi	r26, 0xB4	; 180
     550:	be 4f       	sbci	r27, 0xFE	; 254
     552:	17 96       	adiw	r26, 0x07	; 7
     554:	8c 91       	ld	r24, X
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	31 f4       	brne	.+12     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     562:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	e4 5b       	subi	r30, 0xB4	; 180
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	81 83       	std	Z+1, r24	; 0x01
     57a:	82 83       	std	Z+2, r24	; 0x02
     57c:	83 83       	std	Z+3, r24	; 0x03
     57e:	84 83       	std	Z+4, r24	; 0x04
     580:	85 83       	std	Z+5, r24	; 0x05
     582:	86 83       	std	Z+6, r24	; 0x06
     584:	87 83       	std	Z+7, r24	; 0x07
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	30 c3       	rjmp	.+1632   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	91 05       	cpc	r25, r1
     590:	09 f0       	breq	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	8d c0       	rjmp	.+282    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     594:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <wall_height>
     598:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <wall_height+0x1>
     59c:	df 01       	movw	r26, r30
     59e:	aa 0f       	add	r26, r26
     5a0:	bb 1f       	adc	r27, r27
     5a2:	aa 0f       	add	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	aa 0f       	add	r26, r26
     5a8:	bb 1f       	adc	r27, r27
     5aa:	a4 5b       	subi	r26, 0xB4	; 180
     5ac:	be 4f       	sbci	r27, 0xFE	; 254
     5ae:	1c 92       	st	X, r1
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	1c 92       	st	X, r1
     5b4:	12 97       	sbiw	r26, 0x02	; 2
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	1c 92       	st	X, r1
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	1c 92       	st	X, r1
     5c0:	14 97       	sbiw	r26, 0x04	; 4
     5c2:	15 96       	adiw	r26, 0x05	; 5
     5c4:	1c 92       	st	X, r1
     5c6:	15 97       	sbiw	r26, 0x05	; 5
     5c8:	16 96       	adiw	r26, 0x06	; 6
     5ca:	1c 92       	st	X, r1
     5cc:	16 97       	sbiw	r26, 0x06	; 6
     5ce:	17 96       	adiw	r26, 0x07	; 7
     5d0:	1c 92       	st	X, r1
     5d2:	31 96       	adiw	r30, 0x01	; 1
     5d4:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     5d8:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     5dc:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <height>
     5e0:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <height+0x1>
     5e4:	ed 01       	movw	r28, r26
     5e6:	cc 0f       	add	r28, r28
     5e8:	dd 1f       	adc	r29, r29
     5ea:	cc 0f       	add	r28, r28
     5ec:	dd 1f       	adc	r29, r29
     5ee:	cc 0f       	add	r28, r28
     5f0:	dd 1f       	adc	r29, r29
     5f2:	c4 5b       	subi	r28, 0xB4	; 180
     5f4:	de 4f       	sbci	r29, 0xFE	; 254
     5f6:	88 81       	ld	r24, Y
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	09 f4       	brne	.+2      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5fc:	3f c0       	rjmp	.+126    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     5fe:	ed 01       	movw	r28, r26
     600:	cc 0f       	add	r28, r28
     602:	dd 1f       	adc	r29, r29
     604:	cc 0f       	add	r28, r28
     606:	dd 1f       	adc	r29, r29
     608:	cc 0f       	add	r28, r28
     60a:	dd 1f       	adc	r29, r29
     60c:	c4 5b       	subi	r28, 0xB4	; 180
     60e:	de 4f       	sbci	r29, 0xFE	; 254
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	99 f1       	breq	.+102    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     616:	ed 01       	movw	r28, r26
     618:	cc 0f       	add	r28, r28
     61a:	dd 1f       	adc	r29, r29
     61c:	cc 0f       	add	r28, r28
     61e:	dd 1f       	adc	r29, r29
     620:	cc 0f       	add	r28, r28
     622:	dd 1f       	adc	r29, r29
     624:	c4 5b       	subi	r28, 0xB4	; 180
     626:	de 4f       	sbci	r29, 0xFE	; 254
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	39 f1       	breq	.+78     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     62e:	ed 01       	movw	r28, r26
     630:	cc 0f       	add	r28, r28
     632:	dd 1f       	adc	r29, r29
     634:	cc 0f       	add	r28, r28
     636:	dd 1f       	adc	r29, r29
     638:	cc 0f       	add	r28, r28
     63a:	dd 1f       	adc	r29, r29
     63c:	c4 5b       	subi	r28, 0xB4	; 180
     63e:	de 4f       	sbci	r29, 0xFE	; 254
     640:	8c 81       	ldd	r24, Y+4	; 0x04
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	d9 f0       	breq	.+54     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     646:	ed 01       	movw	r28, r26
     648:	cc 0f       	add	r28, r28
     64a:	dd 1f       	adc	r29, r29
     64c:	cc 0f       	add	r28, r28
     64e:	dd 1f       	adc	r29, r29
     650:	cc 0f       	add	r28, r28
     652:	dd 1f       	adc	r29, r29
     654:	c4 5b       	subi	r28, 0xB4	; 180
     656:	de 4f       	sbci	r29, 0xFE	; 254
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	79 f0       	breq	.+30     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     65e:	ed 01       	movw	r28, r26
     660:	cc 0f       	add	r28, r28
     662:	dd 1f       	adc	r29, r29
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	cc 0f       	add	r28, r28
     66a:	dd 1f       	adc	r29, r29
     66c:	c4 5b       	subi	r28, 0xB4	; 180
     66e:	de 4f       	sbci	r29, 0xFE	; 254
     670:	8e 81       	ldd	r24, Y+6	; 0x06
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	19 f0       	breq	.+6      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	31 f4       	brne	.+12     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     684:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e4 5b       	subi	r30, 0xB4	; 180
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 83       	st	Z, r24
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	83 83       	std	Z+3, r24	; 0x03
     6a0:	84 83       	std	Z+4, r24	; 0x04
     6a2:	85 83       	std	Z+5, r24	; 0x05
     6a4:	86 83       	std	Z+6, r24	; 0x06
     6a6:	87 83       	std	Z+7, r24	; 0x07
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9f c2       	rjmp	.+1342   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	91 05       	cpc	r25, r1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     6b4:	99 c0       	rjmp	.+306    	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     6b6:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <wall_height>
     6ba:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <wall_height+0x1>
     6be:	df 01       	movw	r26, r30
     6c0:	aa 0f       	add	r26, r26
     6c2:	bb 1f       	adc	r27, r27
     6c4:	aa 0f       	add	r26, r26
     6c6:	bb 1f       	adc	r27, r27
     6c8:	aa 0f       	add	r26, r26
     6ca:	bb 1f       	adc	r27, r27
     6cc:	a4 5b       	subi	r26, 0xB4	; 180
     6ce:	be 4f       	sbci	r27, 0xFE	; 254
     6d0:	1c 92       	st	X, r1
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	1c 92       	st	X, r1
     6d6:	11 97       	sbiw	r26, 0x01	; 1
     6d8:	13 96       	adiw	r26, 0x03	; 3
     6da:	1c 92       	st	X, r1
     6dc:	13 97       	sbiw	r26, 0x03	; 3
     6de:	14 96       	adiw	r26, 0x04	; 4
     6e0:	1c 92       	st	X, r1
     6e2:	14 97       	sbiw	r26, 0x04	; 4
     6e4:	15 96       	adiw	r26, 0x05	; 5
     6e6:	1c 92       	st	X, r1
     6e8:	15 97       	sbiw	r26, 0x05	; 5
     6ea:	16 96       	adiw	r26, 0x06	; 6
     6ec:	1c 92       	st	X, r1
     6ee:	16 97       	sbiw	r26, 0x06	; 6
     6f0:	17 96       	adiw	r26, 0x07	; 7
     6f2:	1c 92       	st	X, r1
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     6fa:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     6fe:	df 01       	movw	r26, r30
     700:	aa 0f       	add	r26, r26
     702:	bb 1f       	adc	r27, r27
     704:	aa 0f       	add	r26, r26
     706:	bb 1f       	adc	r27, r27
     708:	aa 0f       	add	r26, r26
     70a:	bb 1f       	adc	r27, r27
     70c:	a4 5b       	subi	r26, 0xB4	; 180
     70e:	be 4f       	sbci	r27, 0xFE	; 254
     710:	8c 91       	ld	r24, X
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f4       	brne	.+2      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
     716:	4f c0       	rjmp	.+158    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     718:	df 01       	movw	r26, r30
     71a:	aa 0f       	add	r26, r26
     71c:	bb 1f       	adc	r27, r27
     71e:	aa 0f       	add	r26, r26
     720:	bb 1f       	adc	r27, r27
     722:	aa 0f       	add	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	a4 5b       	subi	r26, 0xB4	; 180
     728:	be 4f       	sbci	r27, 0xFE	; 254
     72a:	11 96       	adiw	r26, 0x01	; 1
     72c:	8c 91       	ld	r24, X
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	09 f4       	brne	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     732:	41 c0       	rjmp	.+130    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     734:	df 01       	movw	r26, r30
     736:	aa 0f       	add	r26, r26
     738:	bb 1f       	adc	r27, r27
     73a:	aa 0f       	add	r26, r26
     73c:	bb 1f       	adc	r27, r27
     73e:	aa 0f       	add	r26, r26
     740:	bb 1f       	adc	r27, r27
     742:	a4 5b       	subi	r26, 0xB4	; 180
     744:	be 4f       	sbci	r27, 0xFE	; 254
     746:	13 96       	adiw	r26, 0x03	; 3
     748:	8c 91       	ld	r24, X
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	a1 f1       	breq	.+104    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     74e:	df 01       	movw	r26, r30
     750:	aa 0f       	add	r26, r26
     752:	bb 1f       	adc	r27, r27
     754:	aa 0f       	add	r26, r26
     756:	bb 1f       	adc	r27, r27
     758:	aa 0f       	add	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	a4 5b       	subi	r26, 0xB4	; 180
     75e:	be 4f       	sbci	r27, 0xFE	; 254
     760:	14 96       	adiw	r26, 0x04	; 4
     762:	8c 91       	ld	r24, X
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	39 f1       	breq	.+78     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     768:	df 01       	movw	r26, r30
     76a:	aa 0f       	add	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	aa 0f       	add	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	aa 0f       	add	r26, r26
     774:	bb 1f       	adc	r27, r27
     776:	a4 5b       	subi	r26, 0xB4	; 180
     778:	be 4f       	sbci	r27, 0xFE	; 254
     77a:	15 96       	adiw	r26, 0x05	; 5
     77c:	8c 91       	ld	r24, X
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	d1 f0       	breq	.+52     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     782:	df 01       	movw	r26, r30
     784:	aa 0f       	add	r26, r26
     786:	bb 1f       	adc	r27, r27
     788:	aa 0f       	add	r26, r26
     78a:	bb 1f       	adc	r27, r27
     78c:	aa 0f       	add	r26, r26
     78e:	bb 1f       	adc	r27, r27
     790:	a4 5b       	subi	r26, 0xB4	; 180
     792:	be 4f       	sbci	r27, 0xFE	; 254
     794:	16 96       	adiw	r26, 0x06	; 6
     796:	8c 91       	ld	r24, X
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	69 f0       	breq	.+26     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     79c:	df 01       	movw	r26, r30
     79e:	aa 0f       	add	r26, r26
     7a0:	bb 1f       	adc	r27, r27
     7a2:	aa 0f       	add	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	aa 0f       	add	r26, r26
     7a8:	bb 1f       	adc	r27, r27
     7aa:	a4 5b       	subi	r26, 0xB4	; 180
     7ac:	be 4f       	sbci	r27, 0xFE	; 254
     7ae:	17 96       	adiw	r26, 0x07	; 7
     7b0:	8c 91       	ld	r24, X
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	31 f4       	brne	.+12     	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     7be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e4 5b       	subi	r30, 0xB4	; 180
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	80 83       	st	Z, r24
     7d6:	81 83       	std	Z+1, r24	; 0x01
     7d8:	83 83       	std	Z+3, r24	; 0x03
     7da:	84 83       	std	Z+4, r24	; 0x04
     7dc:	85 83       	std	Z+5, r24	; 0x05
     7de:	86 83       	std	Z+6, r24	; 0x06
     7e0:	87 83       	std	Z+7, r24	; 0x07
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	02 c2       	rjmp	.+1028   	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	91 05       	cpc	r25, r1
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
     7ee:	99 c0       	rjmp	.+306    	; 0x922 <__LOCK_REGION_LENGTH__+0x522>
     7f0:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <wall_height>
     7f4:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <wall_height+0x1>
     7f8:	df 01       	movw	r26, r30
     7fa:	aa 0f       	add	r26, r26
     7fc:	bb 1f       	adc	r27, r27
     7fe:	aa 0f       	add	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	aa 0f       	add	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	a4 5b       	subi	r26, 0xB4	; 180
     808:	be 4f       	sbci	r27, 0xFE	; 254
     80a:	1c 92       	st	X, r1
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	1c 92       	st	X, r1
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	12 96       	adiw	r26, 0x02	; 2
     814:	1c 92       	st	X, r1
     816:	12 97       	sbiw	r26, 0x02	; 2
     818:	14 96       	adiw	r26, 0x04	; 4
     81a:	1c 92       	st	X, r1
     81c:	14 97       	sbiw	r26, 0x04	; 4
     81e:	15 96       	adiw	r26, 0x05	; 5
     820:	1c 92       	st	X, r1
     822:	15 97       	sbiw	r26, 0x05	; 5
     824:	16 96       	adiw	r26, 0x06	; 6
     826:	1c 92       	st	X, r1
     828:	16 97       	sbiw	r26, 0x06	; 6
     82a:	17 96       	adiw	r26, 0x07	; 7
     82c:	1c 92       	st	X, r1
     82e:	31 96       	adiw	r30, 0x01	; 1
     830:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     834:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     838:	df 01       	movw	r26, r30
     83a:	aa 0f       	add	r26, r26
     83c:	bb 1f       	adc	r27, r27
     83e:	aa 0f       	add	r26, r26
     840:	bb 1f       	adc	r27, r27
     842:	aa 0f       	add	r26, r26
     844:	bb 1f       	adc	r27, r27
     846:	a4 5b       	subi	r26, 0xB4	; 180
     848:	be 4f       	sbci	r27, 0xFE	; 254
     84a:	8c 91       	ld	r24, X
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	09 f4       	brne	.+2      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     850:	4f c0       	rjmp	.+158    	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     852:	df 01       	movw	r26, r30
     854:	aa 0f       	add	r26, r26
     856:	bb 1f       	adc	r27, r27
     858:	aa 0f       	add	r26, r26
     85a:	bb 1f       	adc	r27, r27
     85c:	aa 0f       	add	r26, r26
     85e:	bb 1f       	adc	r27, r27
     860:	a4 5b       	subi	r26, 0xB4	; 180
     862:	be 4f       	sbci	r27, 0xFE	; 254
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	8c 91       	ld	r24, X
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
     86c:	41 c0       	rjmp	.+130    	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     86e:	df 01       	movw	r26, r30
     870:	aa 0f       	add	r26, r26
     872:	bb 1f       	adc	r27, r27
     874:	aa 0f       	add	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	aa 0f       	add	r26, r26
     87a:	bb 1f       	adc	r27, r27
     87c:	a4 5b       	subi	r26, 0xB4	; 180
     87e:	be 4f       	sbci	r27, 0xFE	; 254
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	8c 91       	ld	r24, X
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	a1 f1       	breq	.+104    	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     888:	df 01       	movw	r26, r30
     88a:	aa 0f       	add	r26, r26
     88c:	bb 1f       	adc	r27, r27
     88e:	aa 0f       	add	r26, r26
     890:	bb 1f       	adc	r27, r27
     892:	aa 0f       	add	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	a4 5b       	subi	r26, 0xB4	; 180
     898:	be 4f       	sbci	r27, 0xFE	; 254
     89a:	14 96       	adiw	r26, 0x04	; 4
     89c:	8c 91       	ld	r24, X
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	39 f1       	breq	.+78     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8a2:	df 01       	movw	r26, r30
     8a4:	aa 0f       	add	r26, r26
     8a6:	bb 1f       	adc	r27, r27
     8a8:	aa 0f       	add	r26, r26
     8aa:	bb 1f       	adc	r27, r27
     8ac:	aa 0f       	add	r26, r26
     8ae:	bb 1f       	adc	r27, r27
     8b0:	a4 5b       	subi	r26, 0xB4	; 180
     8b2:	be 4f       	sbci	r27, 0xFE	; 254
     8b4:	15 96       	adiw	r26, 0x05	; 5
     8b6:	8c 91       	ld	r24, X
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	d1 f0       	breq	.+52     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8bc:	df 01       	movw	r26, r30
     8be:	aa 0f       	add	r26, r26
     8c0:	bb 1f       	adc	r27, r27
     8c2:	aa 0f       	add	r26, r26
     8c4:	bb 1f       	adc	r27, r27
     8c6:	aa 0f       	add	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	a4 5b       	subi	r26, 0xB4	; 180
     8cc:	be 4f       	sbci	r27, 0xFE	; 254
     8ce:	16 96       	adiw	r26, 0x06	; 6
     8d0:	8c 91       	ld	r24, X
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	69 f0       	breq	.+26     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8d6:	df 01       	movw	r26, r30
     8d8:	aa 0f       	add	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	aa 0f       	add	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	aa 0f       	add	r26, r26
     8e2:	bb 1f       	adc	r27, r27
     8e4:	a4 5b       	subi	r26, 0xB4	; 180
     8e6:	be 4f       	sbci	r27, 0xFE	; 254
     8e8:	17 96       	adiw	r26, 0x07	; 7
     8ea:	8c 91       	ld	r24, X
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	31 f4       	brne	.+12     	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     8f8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e4 5b       	subi	r30, 0xB4	; 180
     90a:	fe 4f       	sbci	r31, 0xFE	; 254
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24
     910:	81 83       	std	Z+1, r24	; 0x01
     912:	82 83       	std	Z+2, r24	; 0x02
     914:	84 83       	std	Z+4, r24	; 0x04
     916:	85 83       	std	Z+5, r24	; 0x05
     918:	86 83       	std	Z+6, r24	; 0x06
     91a:	87 83       	std	Z+7, r24	; 0x07
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	65 c1       	rjmp	.+714    	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	91 05       	cpc	r25, r1
     926:	09 f0       	breq	.+2      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
     928:	bd c0       	rjmp	.+378    	; 0xaa4 <__LOCK_REGION_LENGTH__+0x6a4>
     92a:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <wall_height>
     92e:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <wall_height+0x1>
     932:	fd 01       	movw	r30, r26
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e4 5b       	subi	r30, 0xB4	; 180
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	10 82       	st	Z, r1
     946:	11 82       	std	Z+1, r1	; 0x01
     948:	12 82       	std	Z+2, r1	; 0x02
     94a:	13 82       	std	Z+3, r1	; 0x03
     94c:	14 82       	std	Z+4, r1	; 0x04
     94e:	15 82       	std	Z+5, r1	; 0x05
     950:	16 82       	std	Z+6, r1	; 0x06
     952:	17 82       	std	Z+7, r1	; 0x07
     954:	fd 01       	movw	r30, r26
     956:	31 96       	adiw	r30, 0x01	; 1
     958:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     95c:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     960:	ef 01       	movw	r28, r30
     962:	cc 0f       	add	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	cc 0f       	add	r28, r28
     968:	dd 1f       	adc	r29, r29
     96a:	cc 0f       	add	r28, r28
     96c:	dd 1f       	adc	r29, r29
     96e:	c4 5b       	subi	r28, 0xB4	; 180
     970:	de 4f       	sbci	r29, 0xFE	; 254
     972:	88 81       	ld	r24, Y
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	09 f4       	brne	.+2      	; 0x97a <__LOCK_REGION_LENGTH__+0x57a>
     978:	48 c0       	rjmp	.+144    	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     97a:	ef 01       	movw	r28, r30
     97c:	cc 0f       	add	r28, r28
     97e:	dd 1f       	adc	r29, r29
     980:	cc 0f       	add	r28, r28
     982:	dd 1f       	adc	r29, r29
     984:	cc 0f       	add	r28, r28
     986:	dd 1f       	adc	r29, r29
     988:	c4 5b       	subi	r28, 0xB4	; 180
     98a:	de 4f       	sbci	r29, 0xFE	; 254
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	e1 f1       	breq	.+120    	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     992:	ef 01       	movw	r28, r30
     994:	cc 0f       	add	r28, r28
     996:	dd 1f       	adc	r29, r29
     998:	cc 0f       	add	r28, r28
     99a:	dd 1f       	adc	r29, r29
     99c:	cc 0f       	add	r28, r28
     99e:	dd 1f       	adc	r29, r29
     9a0:	c4 5b       	subi	r28, 0xB4	; 180
     9a2:	de 4f       	sbci	r29, 0xFE	; 254
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	81 f1       	breq	.+96     	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     9aa:	ef 01       	movw	r28, r30
     9ac:	cc 0f       	add	r28, r28
     9ae:	dd 1f       	adc	r29, r29
     9b0:	cc 0f       	add	r28, r28
     9b2:	dd 1f       	adc	r29, r29
     9b4:	cc 0f       	add	r28, r28
     9b6:	dd 1f       	adc	r29, r29
     9b8:	c4 5b       	subi	r28, 0xB4	; 180
     9ba:	de 4f       	sbci	r29, 0xFE	; 254
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	21 f1       	breq	.+72     	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     9c2:	ef 01       	movw	r28, r30
     9c4:	cc 0f       	add	r28, r28
     9c6:	dd 1f       	adc	r29, r29
     9c8:	cc 0f       	add	r28, r28
     9ca:	dd 1f       	adc	r29, r29
     9cc:	cc 0f       	add	r28, r28
     9ce:	dd 1f       	adc	r29, r29
     9d0:	c4 5b       	subi	r28, 0xB4	; 180
     9d2:	de 4f       	sbci	r29, 0xFE	; 254
     9d4:	8d 81       	ldd	r24, Y+5	; 0x05
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	c1 f0       	breq	.+48     	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     9da:	ef 01       	movw	r28, r30
     9dc:	cc 0f       	add	r28, r28
     9de:	dd 1f       	adc	r29, r29
     9e0:	cc 0f       	add	r28, r28
     9e2:	dd 1f       	adc	r29, r29
     9e4:	cc 0f       	add	r28, r28
     9e6:	dd 1f       	adc	r29, r29
     9e8:	c4 5b       	subi	r28, 0xB4	; 180
     9ea:	de 4f       	sbci	r29, 0xFE	; 254
     9ec:	8e 81       	ldd	r24, Y+6	; 0x06
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	61 f0       	breq	.+24     	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
     9f2:	ef 01       	movw	r28, r30
     9f4:	cc 0f       	add	r28, r28
     9f6:	dd 1f       	adc	r29, r29
     9f8:	cc 0f       	add	r28, r28
     9fa:	dd 1f       	adc	r29, r29
     9fc:	cc 0f       	add	r28, r28
     9fe:	dd 1f       	adc	r29, r29
     a00:	c4 5b       	subi	r28, 0xB4	; 180
     a02:	de 4f       	sbci	r29, 0xFE	; 254
     a04:	8f 81       	ldd	r24, Y+7	; 0x07
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	31 f4       	brne	.+12     	; 0xa16 <__LOCK_REGION_LENGTH__+0x616>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     a12:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     a16:	ef 01       	movw	r28, r30
     a18:	cc 0f       	add	r28, r28
     a1a:	dd 1f       	adc	r29, r29
     a1c:	cc 0f       	add	r28, r28
     a1e:	dd 1f       	adc	r29, r29
     a20:	cc 0f       	add	r28, r28
     a22:	dd 1f       	adc	r29, r29
     a24:	c4 5b       	subi	r28, 0xB4	; 180
     a26:	de 4f       	sbci	r29, 0xFE	; 254
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	88 83       	st	Y, r24
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	8a 83       	std	Y+2, r24	; 0x02
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	aa 0f       	add	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	aa 0f       	add	r26, r26
     a38:	bb 1f       	adc	r27, r27
     a3a:	aa 0f       	add	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	a4 5a       	subi	r26, 0xA4	; 164
     a40:	be 4f       	sbci	r27, 0xFE	; 254
     a42:	14 96       	adiw	r26, 0x04	; 4
     a44:	8c 91       	ld	r24, X
     a46:	84 30       	cpi	r24, 0x04	; 4
     a48:	91 f4       	brne	.+36     	; 0xa6e <__LOCK_REGION_LENGTH__+0x66e>
     a4a:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <height>
     a4e:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <height+0x1>
     a52:	aa 0f       	add	r26, r26
     a54:	bb 1f       	adc	r27, r27
     a56:	aa 0f       	add	r26, r26
     a58:	bb 1f       	adc	r27, r27
     a5a:	aa 0f       	add	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	a4 5b       	subi	r26, 0xB4	; 180
     a60:	be 4f       	sbci	r27, 0xFE	; 254
     a62:	14 96       	adiw	r26, 0x04	; 4
     a64:	8c 91       	ld	r24, X
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	11 f4       	brne	.+4      	; 0xa6e <__LOCK_REGION_LENGTH__+0x66e>
     a6a:	8c 83       	std	Y+4, r24	; 0x04
     a6c:	0c c0       	rjmp	.+24     	; 0xa86 <__LOCK_REGION_LENGTH__+0x686>
     a6e:	df 01       	movw	r26, r30
     a70:	aa 0f       	add	r26, r26
     a72:	bb 1f       	adc	r27, r27
     a74:	aa 0f       	add	r26, r26
     a76:	bb 1f       	adc	r27, r27
     a78:	aa 0f       	add	r26, r26
     a7a:	bb 1f       	adc	r27, r27
     a7c:	a4 5b       	subi	r26, 0xB4	; 180
     a7e:	be 4f       	sbci	r27, 0xFE	; 254
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	14 96       	adiw	r26, 0x04	; 4
     a84:	8c 93       	st	X, r24
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	e4 5b       	subi	r30, 0xB4	; 180
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	85 83       	std	Z+5, r24	; 0x05
     a9a:	86 83       	std	Z+6, r24	; 0x06
     a9c:	87 83       	std	Z+7, r24	; 0x07
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a4 c0       	rjmp	.+328    	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     aa4:	05 97       	sbiw	r24, 0x05	; 5
     aa6:	09 f0       	breq	.+2      	; 0xaaa <__LOCK_REGION_LENGTH__+0x6aa>
     aa8:	9f c0       	rjmp	.+318    	; 0xbe8 <__LOCK_REGION_LENGTH__+0x7e8>
     aaa:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <wall_height>
     aae:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <wall_height+0x1>
     ab2:	df 01       	movw	r26, r30
     ab4:	aa 0f       	add	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	aa 0f       	add	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	aa 0f       	add	r26, r26
     abe:	bb 1f       	adc	r27, r27
     ac0:	a4 5b       	subi	r26, 0xB4	; 180
     ac2:	be 4f       	sbci	r27, 0xFE	; 254
     ac4:	1c 92       	st	X, r1
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 92       	st	X, r1
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	12 96       	adiw	r26, 0x02	; 2
     ace:	1c 92       	st	X, r1
     ad0:	12 97       	sbiw	r26, 0x02	; 2
     ad2:	13 96       	adiw	r26, 0x03	; 3
     ad4:	1c 92       	st	X, r1
     ad6:	13 97       	sbiw	r26, 0x03	; 3
     ad8:	14 96       	adiw	r26, 0x04	; 4
     ada:	1c 92       	st	X, r1
     adc:	14 97       	sbiw	r26, 0x04	; 4
     ade:	15 96       	adiw	r26, 0x05	; 5
     ae0:	1c 92       	st	X, r1
     ae2:	15 97       	sbiw	r26, 0x05	; 5
     ae4:	16 96       	adiw	r26, 0x06	; 6
     ae6:	1c 92       	st	X, r1
     ae8:	31 96       	adiw	r30, 0x01	; 1
     aea:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <wall_height+0x1>
     aee:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <wall_height>
     af2:	df 01       	movw	r26, r30
     af4:	aa 0f       	add	r26, r26
     af6:	bb 1f       	adc	r27, r27
     af8:	aa 0f       	add	r26, r26
     afa:	bb 1f       	adc	r27, r27
     afc:	aa 0f       	add	r26, r26
     afe:	bb 1f       	adc	r27, r27
     b00:	a4 5b       	subi	r26, 0xB4	; 180
     b02:	be 4f       	sbci	r27, 0xFE	; 254
     b04:	8c 91       	ld	r24, X
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	09 f4       	brne	.+2      	; 0xb0c <__LOCK_REGION_LENGTH__+0x70c>
     b0a:	4f c0       	rjmp	.+158    	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b0c:	df 01       	movw	r26, r30
     b0e:	aa 0f       	add	r26, r26
     b10:	bb 1f       	adc	r27, r27
     b12:	aa 0f       	add	r26, r26
     b14:	bb 1f       	adc	r27, r27
     b16:	aa 0f       	add	r26, r26
     b18:	bb 1f       	adc	r27, r27
     b1a:	a4 5b       	subi	r26, 0xB4	; 180
     b1c:	be 4f       	sbci	r27, 0xFE	; 254
     b1e:	11 96       	adiw	r26, 0x01	; 1
     b20:	8c 91       	ld	r24, X
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	09 f4       	brne	.+2      	; 0xb28 <__LOCK_REGION_LENGTH__+0x728>
     b26:	41 c0       	rjmp	.+130    	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b28:	df 01       	movw	r26, r30
     b2a:	aa 0f       	add	r26, r26
     b2c:	bb 1f       	adc	r27, r27
     b2e:	aa 0f       	add	r26, r26
     b30:	bb 1f       	adc	r27, r27
     b32:	aa 0f       	add	r26, r26
     b34:	bb 1f       	adc	r27, r27
     b36:	a4 5b       	subi	r26, 0xB4	; 180
     b38:	be 4f       	sbci	r27, 0xFE	; 254
     b3a:	12 96       	adiw	r26, 0x02	; 2
     b3c:	8c 91       	ld	r24, X
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	a1 f1       	breq	.+104    	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b42:	df 01       	movw	r26, r30
     b44:	aa 0f       	add	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	aa 0f       	add	r26, r26
     b4a:	bb 1f       	adc	r27, r27
     b4c:	aa 0f       	add	r26, r26
     b4e:	bb 1f       	adc	r27, r27
     b50:	a4 5b       	subi	r26, 0xB4	; 180
     b52:	be 4f       	sbci	r27, 0xFE	; 254
     b54:	13 96       	adiw	r26, 0x03	; 3
     b56:	8c 91       	ld	r24, X
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	39 f1       	breq	.+78     	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b5c:	df 01       	movw	r26, r30
     b5e:	aa 0f       	add	r26, r26
     b60:	bb 1f       	adc	r27, r27
     b62:	aa 0f       	add	r26, r26
     b64:	bb 1f       	adc	r27, r27
     b66:	aa 0f       	add	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	a4 5b       	subi	r26, 0xB4	; 180
     b6c:	be 4f       	sbci	r27, 0xFE	; 254
     b6e:	14 96       	adiw	r26, 0x04	; 4
     b70:	8c 91       	ld	r24, X
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	d1 f0       	breq	.+52     	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b76:	df 01       	movw	r26, r30
     b78:	aa 0f       	add	r26, r26
     b7a:	bb 1f       	adc	r27, r27
     b7c:	aa 0f       	add	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	aa 0f       	add	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	a4 5b       	subi	r26, 0xB4	; 180
     b86:	be 4f       	sbci	r27, 0xFE	; 254
     b88:	15 96       	adiw	r26, 0x05	; 5
     b8a:	8c 91       	ld	r24, X
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	69 f0       	breq	.+26     	; 0xbaa <__LOCK_REGION_LENGTH__+0x7aa>
     b90:	df 01       	movw	r26, r30
     b92:	aa 0f       	add	r26, r26
     b94:	bb 1f       	adc	r27, r27
     b96:	aa 0f       	add	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	aa 0f       	add	r26, r26
     b9c:	bb 1f       	adc	r27, r27
     b9e:	a4 5b       	subi	r26, 0xB4	; 180
     ba0:	be 4f       	sbci	r27, 0xFE	; 254
     ba2:	16 96       	adiw	r26, 0x06	; 6
     ba4:	8c 91       	ld	r24, X
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	31 f4       	brne	.+12     	; 0xbb6 <__LOCK_REGION_LENGTH__+0x7b6>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <flag+0x1>
     bb2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag>
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	e4 5b       	subi	r30, 0xB4	; 180
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	80 83       	st	Z, r24
     bca:	81 83       	std	Z+1, r24	; 0x01
     bcc:	82 83       	std	Z+2, r24	; 0x02
     bce:	83 83       	std	Z+3, r24	; 0x03
     bd0:	84 83       	std	Z+4, r24	; 0x04
     bd2:	85 83       	std	Z+5, r24	; 0x05
     bd4:	86 83       	std	Z+6, r24	; 0x06
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	08 c0       	rjmp	.+16     	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <TimerOn>:
     bf2:	8b e0       	ldi	r24, 0x0B	; 11
     bf4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     bf8:	8d e7       	ldi	r24, 0x7D	; 125
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c00:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c12:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_M>
     c16:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_M+0x1>
     c1a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_M+0x2>
     c1e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_M+0x3>
     c22:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_avr_timer_cntcurr>
     c26:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_avr_timer_cntcurr+0x1>
     c2a:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_avr_timer_cntcurr+0x2>
     c2e:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_avr_timer_cntcurr+0x3>
     c32:	8f b7       	in	r24, 0x3f	; 63
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	8f bf       	out	0x3f, r24	; 63
     c38:	08 95       	ret

00000c3a <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     c4c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_cntcurr>
     c50:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_cntcurr+0x1>
     c54:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_cntcurr+0x2>
     c58:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_cntcurr+0x3>
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	a1 09       	sbc	r26, r1
     c60:	b1 09       	sbc	r27, r1
     c62:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_avr_timer_cntcurr>
     c66:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_avr_timer_cntcurr+0x1>
     c6a:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_avr_timer_cntcurr+0x2>
     c6e:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     c72:	89 2b       	or	r24, r25
     c74:	8a 2b       	or	r24, r26
     c76:	8b 2b       	or	r24, r27
     c78:	99 f4       	brne	.+38     	; 0xca0 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     c80:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_M>
     c84:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_M+0x1>
     c88:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_M+0x2>
     c8c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_M+0x3>
     c90:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_avr_timer_cntcurr>
     c94:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_avr_timer_cntcurr+0x1>
     c98:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_avr_timer_cntcurr+0x2>
     c9c:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_avr_timer_cntcurr+0x3>
	}
}
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <move_Bits>:

int flag = 0; // This will keep track of wall and dot intersection (IF 0 = Clear, IF 1 = END GAME)

void move_Bits()
{	
	if( row == 7 || ground == 0x80 )
     cb2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <row>
     cb6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <row+0x1>
     cba:	87 30       	cpi	r24, 0x07	; 7
     cbc:	91 05       	cpc	r25, r1
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <move_Bits+0x16>
     cc0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ground>
     cc4:	20 38       	cpi	r18, 0x80	; 128
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <move_Bits+0x26>
	{
		ground = 0x01;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ground>
		row = 0;
     cce:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <row+0x1>
     cd2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <row>
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <move_Bits+0x36>
	}
	else 
	{
		ground = (ground << 1);
     cd8:	22 0f       	add	r18, r18
     cda:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <ground>
		row++;
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <row+0x1>
     ce4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <row>
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <row>
     cf0:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <row+0x1>
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	e4 5b       	subi	r30, 0xB4	; 180
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
	green = 0x00;
	

	for(int col = 0; col < 8; col++) 
	{
		if(Matrix[row][col] == 1) 
     d04:	40 e0       	ldi	r20, 0x00	; 0
	blue = 0x00;
	red = 0x00;
	green = 0x00;
	

	for(int col = 0; col < 8; col++) 
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(Matrix[row][col] == 1) 
     d0a:	21 91       	ld	r18, Z+
     d0c:	21 30       	cpi	r18, 0x01	; 1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <move_Bits+0x62>
		{
			green |= 0x80;
     d10:	40 68       	ori	r20, 0x80	; 128
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <move_Bits+0x72>
		}
		
		if(Matrix[row][col] == 2)
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	11 f4       	brne	.+4      	; 0xd1c <move_Bits+0x6a>
		{
			blue |= 0x80;
     d18:	30 68       	ori	r19, 0x80	; 128
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <move_Bits+0x7a>
		}
		
		if(Matrix[row][col] == 3)
     d1c:	23 30       	cpi	r18, 0x03	; 3
     d1e:	11 f4       	brne	.+4      	; 0xd24 <move_Bits+0x72>
		{
			red |= 0x80;
     d20:	50 68       	ori	r21, 0x80	; 128
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <move_Bits+0x7a>
		}
		
		if(Matrix[row][col] == 4)
     d24:	24 30       	cpi	r18, 0x04	; 4
     d26:	11 f4       	brne	.+4      	; 0xd2c <move_Bits+0x7a>
		{
			blue |= 0x80;  green |= 0x80;
     d28:	30 68       	ori	r19, 0x80	; 128
     d2a:	40 68       	ori	r20, 0x80	; 128
		}
		
		//Shift RGB to the right if Column less than 7
		
		if(col < 7) 
     d2c:	87 30       	cpi	r24, 0x07	; 7
     d2e:	91 05       	cpc	r25, r1
     d30:	1c f4       	brge	.+6      	; 0xd38 <move_Bits+0x86>
		{
			red = red >> 1;
     d32:	56 95       	lsr	r21
			green = green >> 1;
     d34:	46 95       	lsr	r20
			blue = blue >> 1;
     d36:	36 95       	lsr	r19
	blue = 0x00;
	red = 0x00;
	green = 0x00;
	

	for(int col = 0; col < 8; col++) 
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	91 05       	cpc	r25, r1
     d3e:	29 f7       	brne	.-54     	; 0xd0a <move_Bits+0x58>
		}
	}
	
	/* The LED Matrix is Anode so bit values need to be inverted */
	
	green = ~green;
     d40:	40 95       	com	r20
     d42:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <green>
	blue = ~blue;
     d46:	30 95       	com	r19
     d48:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <blue>
	red = ~red;
     d4c:	50 95       	com	r21
     d4e:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <red>
	
	for(int x = 7; x >= 0; x--) {
     d52:	27 e0       	ldi	r18, 0x07	; 7
     d54:	30 e0       	ldi	r19, 0x00	; 0
		PORTC = 0x88;
     d56:	48 e8       	ldi	r20, 0x88	; 136
     d58:	48 b9       	out	0x08, r20	; 8
		PORTD = 0x88;
     d5a:	4b b9       	out	0x0b, r20	; 11
		
		/* Set the shift registers to the appropriate ports and nibbles.
		   For upper nibbles in a port shift left 4.
		*/
		PORTC |= ((green >> x) & 0x01);
     d5c:	58 b1       	in	r21, 0x08	; 8
     d5e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <green>
     d62:	89 2f       	mov	r24, r25
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <move_Bits+0xbc>
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <move_Bits+0xb8>
     d72:	81 70       	andi	r24, 0x01	; 1
     d74:	85 2b       	or	r24, r21
     d76:	88 b9       	out	0x08, r24	; 8
		PORTC |= (((ground >> x) << 4) & 0x10);
     d78:	58 b1       	in	r21, 0x08	; 8
     d7a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <ground>
     d7e:	89 2f       	mov	r24, r25
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <move_Bits+0xd8>
     d86:	95 95       	asr	r25
     d88:	87 95       	ror	r24
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <move_Bits+0xd4>
     d8e:	82 95       	swap	r24
     d90:	92 95       	swap	r25
     d92:	90 7f       	andi	r25, 0xF0	; 240
     d94:	98 27       	eor	r25, r24
     d96:	80 7f       	andi	r24, 0xF0	; 240
     d98:	98 27       	eor	r25, r24
     d9a:	80 71       	andi	r24, 0x10	; 16
     d9c:	85 2b       	or	r24, r21
     d9e:	88 b9       	out	0x08, r24	; 8
		PORTD |= ((red >> x) & 0x01);
     da0:	5b b1       	in	r21, 0x0b	; 11
     da2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <red>
     da6:	89 2f       	mov	r24, r25
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <move_Bits+0x100>
     dae:	95 95       	asr	r25
     db0:	87 95       	ror	r24
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <move_Bits+0xfc>
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	85 2b       	or	r24, r21
     dba:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (((blue >> x) << 4) & 0x10);
     dbc:	5b b1       	in	r21, 0x0b	; 11
     dbe:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <blue>
     dc2:	89 2f       	mov	r24, r25
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <move_Bits+0x11c>
     dca:	95 95       	asr	r25
     dcc:	87 95       	ror	r24
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <move_Bits+0x118>
     dd2:	82 95       	swap	r24
     dd4:	92 95       	swap	r25
     dd6:	90 7f       	andi	r25, 0xF0	; 240
     dd8:	98 27       	eor	r25, r24
     dda:	80 7f       	andi	r24, 0xF0	; 240
     ddc:	98 27       	eor	r25, r24
     dde:	80 71       	andi	r24, 0x10	; 16
     de0:	85 2b       	or	r24, r21
     de2:	8b b9       	out	0x0b, r24	; 11
		
		PORTC |= 0x44;
     de4:	88 b1       	in	r24, 0x08	; 8
     de6:	84 64       	ori	r24, 0x44	; 68
     de8:	88 b9       	out	0x08, r24	; 8
		PORTD |= 0x44;
     dea:	8b b1       	in	r24, 0x0b	; 11
     dec:	84 64       	ori	r24, 0x44	; 68
     dee:	8b b9       	out	0x0b, r24	; 11
	
	green = ~green;
	blue = ~blue;
	red = ~red;
	
	for(int x = 7; x >= 0; x--) {
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	31 09       	sbc	r19, r1
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <move_Bits+0x146>
     df6:	b0 cf       	rjmp	.-160    	; 0xd58 <move_Bits+0xa6>
		
		PORTC |= 0x44;
		PORTD |= 0x44;
	}
	
	PORTC |= 0x22;
     df8:	88 b1       	in	r24, 0x08	; 8
     dfa:	82 62       	ori	r24, 0x22	; 34
     dfc:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0x22;
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	82 62       	ori	r24, 0x22	; 34
     e02:	8b b9       	out	0x0b, r24	; 11
	
	PORTC = 0x00;
     e04:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     e06:	1b b8       	out	0x0b, r1	; 11
     e08:	08 95       	ret

00000e0a <digitalConversion>:
}

void digitalConversion() 
{
	ADCSRA |=(1<<ADSC);//start ADC conversion
     e0a:	ea e7       	ldi	r30, 0x7A	; 122
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	80 83       	st	Z, r24
	while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
     e14:	80 81       	ld	r24, Z
     e16:	84 ff       	sbrs	r24, 4
     e18:	fd cf       	rjmp	.-6      	; 0xe14 <digitalConversion+0xa>
}
     e1a:	08 95       	ret

00000e1c <change_Pos>:

enum change_Pos_SM {init, wait, LR, UD};
int change_Pos(int state) 
{
	
	switch(state) 
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	91 05       	cpc	r25, r1
     e20:	41 f0       	breq	.+16     	; 0xe32 <change_Pos+0x16>
     e22:	1c f4       	brge	.+6      	; 0xe2a <change_Pos+0xe>
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	c1 f0       	breq	.+48     	; 0xe58 <change_Pos+0x3c>
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <change_Pos+0x28>
     e2a:	84 30       	cpi	r24, 0x04	; 4
     e2c:	91 05       	cpc	r25, r1
     e2e:	a4 f0       	brlt	.+40     	; 0xe58 <change_Pos+0x3c>
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <change_Pos+0x28>
		case init:
			state = wait;
			break;
			
		case wait:
			if(ADMUX == 0x40) 
     e32:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     e36:	80 34       	cpi	r24, 0x40	; 64
     e38:	a1 f0       	breq	.+40     	; 0xe62 <change_Pos+0x46>
			{
				state = LR; //Detect Movement for Left and Right
			}
			
			else if(ADMUX == 0x41) 
     e3a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     e3e:	81 34       	cpi	r24, 0x41	; 65
     e40:	59 f4       	brne	.+22     	; 0xe58 <change_Pos+0x3c>
     e42:	2c c0       	rjmp	.+88     	; 0xe9c <change_Pos+0x80>
			break;
	}
	
		//ACTIONS FOR SM
	
	switch(state) 
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	91 05       	cpc	r25, r1
     e48:	61 f0       	breq	.+24     	; 0xe62 <change_Pos+0x46>
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	91 05       	cpc	r25, r1
     e4e:	31 f1       	breq	.+76     	; 0xe9c <change_Pos+0x80>
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	09 f0       	breq	.+2      	; 0xe58 <change_Pos+0x3c>
     e56:	3e c0       	rjmp	.+124    	; 0xed4 <change_Pos+0xb8>
	{
		case init:
			break;
		
		case wait:
			newPosition = 0x00;
     e58:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <newPosition>
			break;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	39 c0       	rjmp	.+114    	; 0xed4 <change_Pos+0xb8>
		
		case LR:
			digitalConversion();
     e62:	d3 df       	rcall	.-90     	; 0xe0a <digitalConversion>
			x_val = ADC;	
     e64:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e68:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     e6c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <x_val+0x1>
     e70:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <x_val>
			
			if(x_val > 800) 
     e74:	81 32       	cpi	r24, 0x21	; 33
     e76:	23 e0       	ldi	r18, 0x03	; 3
     e78:	92 07       	cpc	r25, r18
     e7a:	24 f0       	brlt	.+8      	; 0xe84 <change_Pos+0x68>
			{
				newPosition = 0x01; //Right
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <newPosition>
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <change_Pos+0x74>
			}
			
			else if(x_val < 200) 
     e84:	88 3c       	cpi	r24, 0xC8	; 200
     e86:	91 05       	cpc	r25, r1
     e88:	1c f4       	brge	.+6      	; 0xe90 <change_Pos+0x74>
			{
				newPosition = 0x02; //Left
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <newPosition>
			}
			
			ADMUX = 0x41;
     e90:	81 e4       	ldi	r24, 0x41	; 65
     e92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	1c c0       	rjmp	.+56     	; 0xed4 <change_Pos+0xb8>
		
		case UD:
			digitalConversion();
     e9c:	b6 df       	rcall	.-148    	; 0xe0a <digitalConversion>
			y_val = ADC;
     e9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     ea2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     ea6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <y_val+0x1>
     eaa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <y_val>
			
			if(y_val > 800) 
     eae:	81 32       	cpi	r24, 0x21	; 33
     eb0:	23 e0       	ldi	r18, 0x03	; 3
     eb2:	92 07       	cpc	r25, r18
     eb4:	24 f0       	brlt	.+8      	; 0xebe <change_Pos+0xa2>
			{
				newPosition = 0x04; //Up
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <newPosition>
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <change_Pos+0xae>
			}
			
			else if(y_val < 200) 
     ebe:	88 3c       	cpi	r24, 0xC8	; 200
     ec0:	91 05       	cpc	r25, r1
     ec2:	1c f4       	brge	.+6      	; 0xeca <change_Pos+0xae>
			{
				newPosition = 0x08; //Down
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <newPosition>
			}
			
			ADMUX = 0x40;
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	90 e0       	ldi	r25, 0x00	; 0
			
		default:
			break;
	}
	
	PORTB = newPosition;
     ed4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <newPosition>
     ed8:	25 b9       	out	0x05, r18	; 5
	return state;
} 
     eda:	08 95       	ret

00000edc <ADC_init>:
void ADC_init() 
{
	
	//code modified from http://maxembedded.com/2011/06/the-adc-of-the-avr/----------------------------
	
	ADMUX = ( 1 << REFS0 );
     edc:	80 e4       	ldi	r24, 0x40	; 64
     ede:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
     ee2:	87 e8       	ldi	r24, 0x87	; 135
     ee4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ee8:	08 95       	ret

00000eea <main>:
	
	return state;
}

int main(void)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <main+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <main+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <main+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	srand(time(0));
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	e6 d8       	rcall	.-3636   	; 0xca <time>
     efe:	cb 01       	movw	r24, r22
     f00:	9f d1       	rcall	.+830    	; 0x1240 <srand>
	/* (DDR) F = output; 0 = input */
	
	/* A0 - A2: Input */
	/* A3 - A7: Output */
	DDRA = 0xF0; PORTA = 0x0F;
     f02:	80 ef       	ldi	r24, 0xF0	; 240
     f04:	81 b9       	out	0x01, r24	; 1
     f06:	8f e0       	ldi	r24, 0x0F	; 15
     f08:	82 b9       	out	0x02, r24	; 2
	/* Ports B - D are output ports */
	DDRB = 0xFF; PORTB = 0x00;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	84 b9       	out	0x04, r24	; 4
     f0e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     f10:	87 b9       	out	0x07, r24	; 7
     f12:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     f14:	8a b9       	out	0x0a, r24	; 10
     f16:	1b b8       	out	0x0b, r1	; 11
	//calculate GCD
	unsigned long int GCD = 1;
	
	//declare tasks and task array
	static task task1, task2, task3;
	task *tasks[] = {&task1, &task2, &task3};
     f18:	86 e0       	ldi	r24, 0x06	; 6
     f1a:	ed e0       	ldi	r30, 0x0D	; 13
     f1c:	f1 e0       	ldi	r31, 0x01	; 1
     f1e:	de 01       	movw	r26, r28
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	8a 95       	dec	r24
     f28:	e1 f7       	brne	.-8      	; 0xf22 <main+0x38>
	const unsigned short numTasks = 3; 
	

	task1.state = init; //initial state of task 1
     f2a:	ea e2       	ldi	r30, 0x2A	; 42
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	10 82       	st	Z, r1
	task1.period = change_Pos_period;//task 1 period
     f30:	82 e3       	ldi	r24, 0x32	; 50
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	81 83       	std	Z+1, r24	; 0x01
     f3a:	92 83       	std	Z+2, r25	; 0x02
     f3c:	a3 83       	std	Z+3, r26	; 0x03
     f3e:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = change_Pos_period;//set to period so it ticks when it turns on
     f40:	85 83       	std	Z+5, r24	; 0x05
     f42:	96 83       	std	Z+6, r25	; 0x06
     f44:	a7 83       	std	Z+7, r26	; 0x07
     f46:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &change_Pos;
     f48:	2e e0       	ldi	r18, 0x0E	; 14
     f4a:	37 e0       	ldi	r19, 0x07	; 7
     f4c:	32 87       	std	Z+10, r19	; 0x0a
     f4e:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = make_init;
     f50:	ef e1       	ldi	r30, 0x1F	; 31
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	10 82       	st	Z, r1
	task2.period = moveObject_period;
     f56:	81 83       	std	Z+1, r24	; 0x01
     f58:	92 83       	std	Z+2, r25	; 0x02
     f5a:	a3 83       	std	Z+3, r26	; 0x03
     f5c:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = moveObject_period;
     f5e:	85 83       	std	Z+5, r24	; 0x05
     f60:	96 83       	std	Z+6, r25	; 0x06
     f62:	a7 83       	std	Z+7, r26	; 0x07
     f64:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &moveObject;
     f66:	88 e7       	ldi	r24, 0x78	; 120
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	92 87       	std	Z+10, r25	; 0x0a
     f6c:	81 87       	std	Z+9, r24	; 0x09
	
	task3.state = walls_init;
     f6e:	e4 e1       	ldi	r30, 0x14	; 20
     f70:	f1 e0       	ldi	r31, 0x01	; 1
     f72:	10 82       	st	Z, r1
	task3.period = make_Walls_period;
     f74:	84 ef       	ldi	r24, 0xF4	; 244
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	81 83       	std	Z+1, r24	; 0x01
     f7e:	92 83       	std	Z+2, r25	; 0x02
     f80:	a3 83       	std	Z+3, r26	; 0x03
     f82:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = make_Walls_period;
     f84:	85 83       	std	Z+5, r24	; 0x05
     f86:	96 83       	std	Z+6, r25	; 0x06
     f88:	a7 83       	std	Z+7, r26	; 0x07
     f8a:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &make_Walls;
     f8c:	8e e7       	ldi	r24, 0x7E	; 126
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	92 87       	std	Z+10, r25	; 0x0a
     f92:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_M>
     fa0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_M+0x1>
     fa4:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_M+0x2>
     fa8:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     fac:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_avr_timer_cntcurr>
     fb0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_avr_timer_cntcurr+0x1>
     fb4:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_avr_timer_cntcurr+0x2>
     fb8:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_avr_timer_cntcurr+0x3>

	
	TimerSet(1);
	TimerOn();
     fbc:	1a de       	rcall	.-972    	; 0xbf2 <TimerOn>
	ADC_init();
     fbe:	8e df       	rcall	.-228    	; 0xedc <ADC_init>
	
	// Set Height and Width Values for Character and Walls
	height = 7;
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <height+0x1>
     fc8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <height>
	width = 7;
     fcc:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <width+0x1>
     fd0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <width>
	wall_height = 0;
     fd4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <wall_height+0x1>
     fd8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <wall_height>
     fdc:	8c e4       	ldi	r24, 0x4C	; 76
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	0f 2e       	mov	r0, r31
     fe2:	fc e8       	ldi	r31, 0x8C	; 140
     fe4:	cf 2e       	mov	r12, r31
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	df 2e       	mov	r13, r31
     fea:	f0 2d       	mov	r31, r0
     fec:	fc 01       	movw	r30, r24
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <main+0x116>
	
	//Set Matrix Values
	for(int i = 0; i < 8; i++) {
		for(int j = 0; j < 8; j++)
		{
			Matrix[i][j] = 0;
     ff0:	11 92       	st	Z+, r1
	width = 7;
	wall_height = 0;
	
	//Set Matrix Values
	for(int i = 0; i < 8; i++) {
		for(int j = 0; j < 8; j++)
     ff2:	2e 17       	cp	r18, r30
     ff4:	3f 07       	cpc	r19, r31
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <main+0x106>
     ff8:	f9 01       	movw	r30, r18
	height = 7;
	width = 7;
	wall_height = 0;
	
	//Set Matrix Values
	for(int i = 0; i < 8; i++) {
     ffa:	2c 15       	cp	r18, r12
     ffc:	3d 05       	cpc	r19, r13
     ffe:	21 f0       	breq	.+8      	; 0x1008 <main+0x11e>
    1000:	9f 01       	movw	r18, r30
    1002:	28 5f       	subi	r18, 0xF8	; 248
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	f4 cf       	rjmp	.-24     	; 0xff0 <main+0x106>
			Matrix[i][j] = 0;
		}
	}
	
	//Insert the Dot Starting Position
	Matrix[height][width] = 1;
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <Matrix+0x3f>
    100e:	58 2e       	mov	r5, r24
    1010:	69 2e       	mov	r6, r25
				{
					Matrix[row][col] = 0;
				}
			}

			Matrix[0][0] = 4;
    1012:	0c e4       	ldi	r16, 0x4C	; 76
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	68 94       	set
    1018:	77 24       	eor	r7, r7
    101a:	72 f8       	bld	r7, 2
    101c:	7e 01       	movw	r14, r28
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	e8 0e       	add	r14, r24
    1022:	f1 1c       	adc	r15, r1
	//Insert the Dot Starting Position
	Matrix[height][width] = 1;
	
	while (1) 
	{
		move_Bits();
    1024:	46 de       	rcall	.-884    	; 0xcb2 <move_Bits>
		if(flag == 0)
    1026:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag>
    102a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <flag+0x1>
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	c9 f5       	brne	.+114    	; 0x10a4 <main+0x1ba>
    1032:	de 01       	movw	r26, r28
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	4d 01       	movw	r8, r26
		{
			for(int i = 0; i < numTasks; ++i) 
			{
				if(tasks[i]->elapsedTime == tasks[i]->period) 
    1038:	f4 01       	movw	r30, r8
    103a:	a1 90       	ld	r10, Z+
    103c:	b1 90       	ld	r11, Z+
    103e:	4f 01       	movw	r8, r30
    1040:	d5 01       	movw	r26, r10
    1042:	15 96       	adiw	r26, 0x05	; 5
    1044:	4d 91       	ld	r20, X+
    1046:	5d 91       	ld	r21, X+
    1048:	6d 91       	ld	r22, X+
    104a:	7c 91       	ld	r23, X
    104c:	18 97       	sbiw	r26, 0x08	; 8
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	8d 91       	ld	r24, X+
    1052:	9d 91       	ld	r25, X+
    1054:	0d 90       	ld	r0, X+
    1056:	bc 91       	ld	r27, X
    1058:	a0 2d       	mov	r26, r0
    105a:	48 17       	cp	r20, r24
    105c:	59 07       	cpc	r21, r25
    105e:	6a 07       	cpc	r22, r26
    1060:	7b 07       	cpc	r23, r27
    1062:	81 f4       	brne	.+32     	; 0x1084 <main+0x19a>
				{
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    1064:	f5 01       	movw	r30, r10
    1066:	80 81       	ld	r24, Z
    1068:	01 84       	ldd	r0, Z+9	; 0x09
    106a:	f2 85       	ldd	r31, Z+10	; 0x0a
    106c:	e0 2d       	mov	r30, r0
    106e:	08 2e       	mov	r0, r24
    1070:	00 0c       	add	r0, r0
    1072:	99 0b       	sbc	r25, r25
    1074:	09 95       	icall
    1076:	d5 01       	movw	r26, r10
    1078:	8c 93       	st	X, r24
					tasks[i]->elapsedTime = 0;
    107a:	f5 01       	movw	r30, r10
    107c:	15 82       	std	Z+5, r1	; 0x05
    107e:	16 82       	std	Z+6, r1	; 0x06
    1080:	17 82       	std	Z+7, r1	; 0x07
    1082:	10 86       	std	Z+8, r1	; 0x08
				}
				tasks[i]->elapsedTime += GCD;
    1084:	f5 01       	movw	r30, r10
    1086:	85 81       	ldd	r24, Z+5	; 0x05
    1088:	96 81       	ldd	r25, Z+6	; 0x06
    108a:	a7 81       	ldd	r26, Z+7	; 0x07
    108c:	b0 85       	ldd	r27, Z+8	; 0x08
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	a1 1d       	adc	r26, r1
    1092:	b1 1d       	adc	r27, r1
    1094:	85 83       	std	Z+5, r24	; 0x05
    1096:	96 83       	std	Z+6, r25	; 0x06
    1098:	a7 83       	std	Z+7, r26	; 0x07
    109a:	b0 87       	std	Z+8, r27	; 0x08
	while (1) 
	{
		move_Bits();
		if(flag == 0)
		{
			for(int i = 0; i < numTasks; ++i) 
    109c:	8e 14       	cp	r8, r14
    109e:	9f 04       	cpc	r9, r15
    10a0:	59 f6       	brne	.-106    	; 0x1038 <main+0x14e>
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <main+0x238>
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += GCD;
			}
		}
		else if(flag == 1)
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	e9 f5       	brne	.+122    	; 0x1122 <main+0x238>
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <main+0x1d2>
		{
			for(int row = 0; row < 8; row++)
			{
				for(int col = 0; col < 8; col++)
				{
					Matrix[row][col] = 0;
    10aa:	11 92       	st	Z+, r1
		}
		else if(flag == 1)
		{
			for(int row = 0; row < 8; row++)
			{
				for(int col = 0; col < 8; col++)
    10ac:	8e 17       	cp	r24, r30
    10ae:	9f 07       	cpc	r25, r31
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <main+0x1c0>
    10b2:	fc 01       	movw	r30, r24
				tasks[i]->elapsedTime += GCD;
			}
		}
		else if(flag == 1)
		{
			for(int row = 0; row < 8; row++)
    10b4:	8c 15       	cp	r24, r12
    10b6:	9d 05       	cpc	r25, r13
    10b8:	19 f4       	brne	.+6      	; 0x10c0 <main+0x1d6>
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <main+0x1dc>
    10bc:	e5 2d       	mov	r30, r5
    10be:	f6 2d       	mov	r31, r6
    10c0:	cf 01       	movw	r24, r30
    10c2:	08 96       	adiw	r24, 0x08	; 8
    10c4:	f2 cf       	rjmp	.-28     	; 0x10aa <main+0x1c0>
				{
					Matrix[row][col] = 0;
				}
			}

			Matrix[0][0] = 4;
    10c6:	d8 01       	movw	r26, r16
    10c8:	7c 92       	st	X, r7
			Matrix[1][1] = 4;
    10ca:	19 96       	adiw	r26, 0x09	; 9
    10cc:	7c 92       	st	X, r7
    10ce:	19 97       	sbiw	r26, 0x09	; 9
			Matrix[2][2] = 4;
    10d0:	52 96       	adiw	r26, 0x12	; 18
    10d2:	7c 92       	st	X, r7
    10d4:	52 97       	sbiw	r26, 0x12	; 18
			Matrix[3][3] = 4;
    10d6:	5b 96       	adiw	r26, 0x1b	; 27
    10d8:	7c 92       	st	X, r7
    10da:	5b 97       	sbiw	r26, 0x1b	; 27
			Matrix[4][4] = 4;
    10dc:	94 96       	adiw	r26, 0x24	; 36
    10de:	7c 92       	st	X, r7
    10e0:	94 97       	sbiw	r26, 0x24	; 36
			Matrix[5][5] = 4;
    10e2:	9d 96       	adiw	r26, 0x2d	; 45
    10e4:	7c 92       	st	X, r7
    10e6:	9d 97       	sbiw	r26, 0x2d	; 45
			Matrix[6][6] = 4;
    10e8:	d6 96       	adiw	r26, 0x36	; 54
    10ea:	7c 92       	st	X, r7
    10ec:	d6 97       	sbiw	r26, 0x36	; 54
			Matrix[7][7] = 4;
    10ee:	df 96       	adiw	r26, 0x3f	; 63
    10f0:	7c 92       	st	X, r7
    10f2:	df 97       	sbiw	r26, 0x3f	; 63

			Matrix[0][7] = 4;
    10f4:	17 96       	adiw	r26, 0x07	; 7
    10f6:	7c 92       	st	X, r7
    10f8:	17 97       	sbiw	r26, 0x07	; 7
			Matrix[1][6] = 4;
    10fa:	1e 96       	adiw	r26, 0x0e	; 14
    10fc:	7c 92       	st	X, r7
    10fe:	1e 97       	sbiw	r26, 0x0e	; 14
			Matrix[2][5] = 4;
    1100:	55 96       	adiw	r26, 0x15	; 21
    1102:	7c 92       	st	X, r7
    1104:	55 97       	sbiw	r26, 0x15	; 21
			Matrix[3][4] = 4;
    1106:	5c 96       	adiw	r26, 0x1c	; 28
    1108:	7c 92       	st	X, r7
    110a:	5c 97       	sbiw	r26, 0x1c	; 28
			Matrix[4][3] = 4;
    110c:	93 96       	adiw	r26, 0x23	; 35
    110e:	7c 92       	st	X, r7
    1110:	93 97       	sbiw	r26, 0x23	; 35
			Matrix[5][2] = 4;
    1112:	9a 96       	adiw	r26, 0x2a	; 42
    1114:	7c 92       	st	X, r7
    1116:	9a 97       	sbiw	r26, 0x2a	; 42
			Matrix[6][1] = 4;
    1118:	d1 96       	adiw	r26, 0x31	; 49
    111a:	7c 92       	st	X, r7
    111c:	d1 97       	sbiw	r26, 0x31	; 49
			Matrix[7][0] = 4;
    111e:	d8 96       	adiw	r26, 0x38	; 56
    1120:	7c 92       	st	X, r7
		}
		
		
		while(!TimerFlag);
    1122:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerFlag>
    1126:	88 23       	and	r24, r24
    1128:	e1 f3       	breq	.-8      	; 0x1122 <main+0x238>
		TimerFlag = 0;
    112a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <TimerFlag>
	}
    112e:	7a cf       	rjmp	.-268    	; 0x1024 <main+0x13a>

00001130 <__udivmodsi4>:
    1130:	a1 e2       	ldi	r26, 0x21	; 33
    1132:	1a 2e       	mov	r1, r26
    1134:	aa 1b       	sub	r26, r26
    1136:	bb 1b       	sub	r27, r27
    1138:	fd 01       	movw	r30, r26
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <__udivmodsi4_ep>

0000113c <__udivmodsi4_loop>:
    113c:	aa 1f       	adc	r26, r26
    113e:	bb 1f       	adc	r27, r27
    1140:	ee 1f       	adc	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	a2 17       	cp	r26, r18
    1146:	b3 07       	cpc	r27, r19
    1148:	e4 07       	cpc	r30, r20
    114a:	f5 07       	cpc	r31, r21
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__udivmodsi4_ep>
    114e:	a2 1b       	sub	r26, r18
    1150:	b3 0b       	sbc	r27, r19
    1152:	e4 0b       	sbc	r30, r20
    1154:	f5 0b       	sbc	r31, r21

00001156 <__udivmodsi4_ep>:
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	1a 94       	dec	r1
    1160:	69 f7       	brne	.-38     	; 0x113c <__udivmodsi4_loop>
    1162:	60 95       	com	r22
    1164:	70 95       	com	r23
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    116e:	bd 01       	movw	r22, r26
    1170:	cf 01       	movw	r24, r30
    1172:	08 95       	ret

00001174 <__divmodsi4>:
    1174:	05 2e       	mov	r0, r21
    1176:	97 fb       	bst	r25, 7
    1178:	16 f4       	brtc	.+4      	; 0x117e <__divmodsi4+0xa>
    117a:	00 94       	com	r0
    117c:	0f d0       	rcall	.+30     	; 0x119c <__negsi2>
    117e:	57 fd       	sbrc	r21, 7
    1180:	05 d0       	rcall	.+10     	; 0x118c <__divmodsi4_neg2>
    1182:	d6 df       	rcall	.-84     	; 0x1130 <__udivmodsi4>
    1184:	07 fc       	sbrc	r0, 7
    1186:	02 d0       	rcall	.+4      	; 0x118c <__divmodsi4_neg2>
    1188:	46 f4       	brtc	.+16     	; 0x119a <__divmodsi4_exit>
    118a:	08 c0       	rjmp	.+16     	; 0x119c <__negsi2>

0000118c <__divmodsi4_neg2>:
    118c:	50 95       	com	r21
    118e:	40 95       	com	r20
    1190:	30 95       	com	r19
    1192:	21 95       	neg	r18
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	4f 4f       	sbci	r20, 0xFF	; 255
    1198:	5f 4f       	sbci	r21, 0xFF	; 255

0000119a <__divmodsi4_exit>:
    119a:	08 95       	ret

0000119c <__negsi2>:
    119c:	90 95       	com	r25
    119e:	80 95       	com	r24
    11a0:	70 95       	com	r23
    11a2:	61 95       	neg	r22
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	08 95       	ret

000011ac <do_rand>:
    11ac:	8f 92       	push	r8
    11ae:	9f 92       	push	r9
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
    11c2:	68 81       	ld	r22, Y
    11c4:	79 81       	ldd	r23, Y+1	; 0x01
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ca:	61 15       	cp	r22, r1
    11cc:	71 05       	cpc	r23, r1
    11ce:	81 05       	cpc	r24, r1
    11d0:	91 05       	cpc	r25, r1
    11d2:	21 f4       	brne	.+8      	; 0x11dc <do_rand+0x30>
    11d4:	64 e2       	ldi	r22, 0x24	; 36
    11d6:	79 ed       	ldi	r23, 0xD9	; 217
    11d8:	8b e5       	ldi	r24, 0x5B	; 91
    11da:	97 e0       	ldi	r25, 0x07	; 7
    11dc:	2d e1       	ldi	r18, 0x1D	; 29
    11de:	33 ef       	ldi	r19, 0xF3	; 243
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	c7 df       	rcall	.-114    	; 0x1174 <__divmodsi4>
    11e6:	49 01       	movw	r8, r18
    11e8:	5a 01       	movw	r10, r20
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	a7 ea       	ldi	r26, 0xA7	; 167
    11f0:	b1 e4       	ldi	r27, 0x41	; 65
    11f2:	86 d0       	rcall	.+268    	; 0x1300 <__muluhisi3>
    11f4:	6b 01       	movw	r12, r22
    11f6:	7c 01       	movw	r14, r24
    11f8:	ac ee       	ldi	r26, 0xEC	; 236
    11fa:	b4 ef       	ldi	r27, 0xF4	; 244
    11fc:	a5 01       	movw	r20, r10
    11fe:	94 01       	movw	r18, r8
    1200:	8b d0       	rcall	.+278    	; 0x1318 <__mulohisi3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8c 0d       	add	r24, r12
    1208:	9d 1d       	adc	r25, r13
    120a:	ae 1d       	adc	r26, r14
    120c:	bf 1d       	adc	r27, r15
    120e:	b7 ff       	sbrs	r27, 7
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <do_rand+0x6c>
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	a1 09       	sbc	r26, r1
    1216:	b0 48       	sbci	r27, 0x80	; 128
    1218:	88 83       	st	Y, r24
    121a:	99 83       	std	Y+1, r25	; 0x01
    121c:	aa 83       	std	Y+2, r26	; 0x02
    121e:	bb 83       	std	Y+3, r27	; 0x03
    1220:	9f 77       	andi	r25, 0x7F	; 127
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	08 95       	ret

00001238 <rand_r>:
    1238:	b9 cf       	rjmp	.-142    	; 0x11ac <do_rand>

0000123a <rand>:
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	b6 cf       	rjmp	.-148    	; 0x11ac <do_rand>

00001240 <srand>:
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1248:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    124c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1250:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1254:	08 95       	ret

00001256 <do_random>:
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
    126c:	68 81       	ld	r22, Y
    126e:	79 81       	ldd	r23, Y+1	; 0x01
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	61 15       	cp	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	81 05       	cpc	r24, r1
    127a:	91 05       	cpc	r25, r1
    127c:	21 f4       	brne	.+8      	; 0x1286 <do_random+0x30>
    127e:	64 e2       	ldi	r22, 0x24	; 36
    1280:	79 ed       	ldi	r23, 0xD9	; 217
    1282:	8b e5       	ldi	r24, 0x5B	; 91
    1284:	97 e0       	ldi	r25, 0x07	; 7
    1286:	2d e1       	ldi	r18, 0x1D	; 29
    1288:	33 ef       	ldi	r19, 0xF3	; 243
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	72 df       	rcall	.-284    	; 0x1174 <__divmodsi4>
    1290:	49 01       	movw	r8, r18
    1292:	5a 01       	movw	r10, r20
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	a7 ea       	ldi	r26, 0xA7	; 167
    129a:	b1 e4       	ldi	r27, 0x41	; 65
    129c:	31 d0       	rcall	.+98     	; 0x1300 <__muluhisi3>
    129e:	6b 01       	movw	r12, r22
    12a0:	7c 01       	movw	r14, r24
    12a2:	ac ee       	ldi	r26, 0xEC	; 236
    12a4:	b4 ef       	ldi	r27, 0xF4	; 244
    12a6:	a5 01       	movw	r20, r10
    12a8:	94 01       	movw	r18, r8
    12aa:	36 d0       	rcall	.+108    	; 0x1318 <__mulohisi3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8c 0d       	add	r24, r12
    12b2:	9d 1d       	adc	r25, r13
    12b4:	ae 1d       	adc	r26, r14
    12b6:	bf 1d       	adc	r27, r15
    12b8:	b7 ff       	sbrs	r27, 7
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <do_random+0x6c>
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	a1 09       	sbc	r26, r1
    12c0:	b0 48       	sbci	r27, 0x80	; 128
    12c2:	88 83       	st	Y, r24
    12c4:	99 83       	std	Y+1, r25	; 0x01
    12c6:	aa 83       	std	Y+2, r26	; 0x02
    12c8:	bb 83       	std	Y+3, r27	; 0x03
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	9f 77       	andi	r25, 0x7F	; 127
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	af 90       	pop	r10
    12e0:	9f 90       	pop	r9
    12e2:	8f 90       	pop	r8
    12e4:	08 95       	ret

000012e6 <random_r>:
    12e6:	b7 cf       	rjmp	.-146    	; 0x1256 <do_random>

000012e8 <random>:
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	b4 cf       	rjmp	.-152    	; 0x1256 <do_random>

000012ee <srandom>:
    12ee:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    12f2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    12f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    12fa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    12fe:	08 95       	ret

00001300 <__muluhisi3>:
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__umulhisi3>
    1302:	a5 9f       	mul	r26, r21
    1304:	90 0d       	add	r25, r0
    1306:	b4 9f       	mul	r27, r20
    1308:	90 0d       	add	r25, r0
    130a:	a4 9f       	mul	r26, r20
    130c:	80 0d       	add	r24, r0
    130e:	91 1d       	adc	r25, r1
    1310:	11 24       	eor	r1, r1
    1312:	08 95       	ret

00001314 <__mulshisi3>:
    1314:	b7 ff       	sbrs	r27, 7
    1316:	f4 cf       	rjmp	.-24     	; 0x1300 <__muluhisi3>

00001318 <__mulohisi3>:
    1318:	f3 df       	rcall	.-26     	; 0x1300 <__muluhisi3>
    131a:	82 1b       	sub	r24, r18
    131c:	93 0b       	sbc	r25, r19
    131e:	08 95       	ret

00001320 <__umulhisi3>:
    1320:	a2 9f       	mul	r26, r18
    1322:	b0 01       	movw	r22, r0
    1324:	b3 9f       	mul	r27, r19
    1326:	c0 01       	movw	r24, r0
    1328:	a3 9f       	mul	r26, r19
    132a:	70 0d       	add	r23, r0
    132c:	81 1d       	adc	r24, r1
    132e:	11 24       	eor	r1, r1
    1330:	91 1d       	adc	r25, r1
    1332:	b2 9f       	mul	r27, r18
    1334:	70 0d       	add	r23, r0
    1336:	81 1d       	adc	r24, r1
    1338:	11 24       	eor	r1, r1
    133a:	91 1d       	adc	r25, r1
    133c:	08 95       	ret

0000133e <_exit>:
    133e:	f8 94       	cli

00001340 <__stop_program>:
    1340:	ff cf       	rjmp	.-2      	; 0x1340 <__stop_program>
